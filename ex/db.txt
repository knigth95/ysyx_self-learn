#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>

#define MAX_DATA 512
#define MAX_ROWS 100

// 添加新的宏定义，用于指定文件名
#define META_FILE "metadata"

// 修改 Address 结构体，添加新的字段用于搜索
struct Address {
    int id;
    int set;
    char name[MAX_DATA];
    char email[MAX_DATA];
    // 新添加的字段
    char phone[MAX_DATA];
    char city[MAX_DATA];
};

struct Database {
    struct Address rows[MAX_ROWS];
    // 新添加的字段，用于存储数据库的最大数据和行数
    int max_data;
    int max_rows;
};

struct Connection {
    FILE *file;
    struct Database *db;
};

void die(const char *message)
{
    if(errno) {
        perror(message);
    } else {
        printf("ERROR: %s\n", message);
    }

    exit(1);
}

void Address_print(struct Address *addr)
{
    printf("%d %s %s %s %s\n",
            addr->id, addr->name, addr->email, addr->phone, addr->city);
}

void Database_load(struct Connection *conn)
{
    int rc = fread(conn->db, sizeof(struct Database), 1, conn->file);
    if(rc != 1) die("Failed to load database.");
}

struct Connection *Database_open(const char *filename, char mode, int max_data, int max_rows)
{
    struct Connection *conn = malloc(sizeof(struct Connection));
    if(!conn) die("Memory error");

    conn->db = malloc(sizeof(struct Database));
    if(!conn->db) die("Memory error");

    if(mode == 'c') {
        conn->file = fopen(filename, "w");
    } else {
        conn->file = fopen(filename, "r+");

        if(conn->file) {
            Database_load(conn);
        }
    }

    if(!conn->file) die("Failed to open the file");

    // 将 max_data 和 max_rows 存储到数据库中
    conn->db->max_data = max_data;
    conn->db->max_rows = max_rows;

    return conn;
}

void Database_close(struct Connection *conn)
{
    if(conn) {
        if(conn->file) fclose(conn->file);
        if(conn->db) free(conn->db);
        free(conn);
    }
}

void Database_write(struct Connection *conn)
{
    rewind(conn->file);

    int rc = fwrite(conn->db, sizeof(struct Database), 1, conn->file);
    if(rc != 1) die("Failed to write database.");

    rc = fflush(conn->file);
    if(rc == -1) die("Cannot flush database.");
}

void Database_create(struct Connection *conn)
{
    int i = 0;

    for(i = 0; i < conn->db->max_rows; i++) {
        // make a prototype to initialize it
        struct Address addr = {.id = i, .set = 0};
        // then just assign it
        conn->db->rows[i] = addr;
    }
}

void Database_set(struct Connection *conn, int id, const char *name, const char *email, const char *phone, const char *city)
{
    struct Address *addr = &conn->db->rows[id];
    if(addr->set) die("Already set, delete it first");

    addr->set = 1;
    // WARNING: bug, read the "How To Break It" and fix this
    char *res = strncpy(addr->name, name, conn->db->max_data);
    // demonstrate the strncpy bug
    if(!res) die("Name copy failed");

    res = strncpy(addr->email, email, conn->db->max_data);
    if(!res) die("Email copy failed");

    // 添加新字段的拷贝
    res = strncpy(addr->phone, phone, conn->db->max_data);
    if(!res) die("Phone copy failed");

    res = strncpy(addr->city, city, conn->db->max_data);
    if(!res) die("City copy failed");
}

void Database_get(struct Connection *conn, int id)
{
    struct Address *addr = &conn->db->rows[id];

    if(addr->set) {
        Address_print(addr);
    } else {
        die("ID is not set");
    }
}

void Database_delete(struct Connection *conn, int id)
{
    struct Address addr = {.id = id, .set = 0};
    conn->db->rows[id] = addr;
}

void Database_list(struct Connection *conn)
{
    int i = 0;
    struct Database *db = conn->db;

    for(i = 0; i < db->max_rows; i++) {
        struct Address *cur = &db->rows[i];

        if(cur->set) {
            Address_print(cur);
        }
    }
}

int main(int argc, char *argv[])
{
    if(argc < 5) die("USAGE: ex17 <dbfile> <action> [action params] <max_data> <max_rows>");

    char *filename = argv[1];
    char action = argv[2][0];
    int max_data = atoi(argv[argc - 2]);
    int max_rows = atoi(argv[argc - 1]);
    struct Connection *conn = Database_open(filename, action, max_data, max_rows);
    int id = 0;

    if(argc > 5) id = atoi(argv[3]);
    if(id >= max_rows) die("There's not that many records.");

    switch(action) {
        case 'c':
            Database_create(conn);
            Database_write(conn);
            break;

        case 'g':
            if(argc != 4) die("Need an id to get");

            Database_get(conn, id);
            break;

        case 's':
            if(argc != 8) die("Need id, name, email, phone, city to set");

            Database_set(conn, id, argv[4], argv[5], argv[6], argv[7]);
            Database_write(conn);
            break;

        case 'd':
            if(argc != 4) die("Need id to delete");

            Database_delete(conn, id);
            Database_write(conn);
            break;

        case 'l':
            Database_list(conn);
            break;
        default:
            die("Invalid action, only: c=create, g=get, s=set, d=del, l=list");
    }

    Database_close(conn);

    return 0;
}



void Database_write(struct Connection *conn) {
    rewind(conn->file);

    // 首先写入数据库的配置信息，如最大数据长度和行数
    int rc = fwrite(&conn->db->max_data, sizeof(conn->db->max_data), 1, conn->file);
    if(rc != 1) die("Failed to write max_data to database.", conn);

    rc = fwrite(&conn->db->max_rows, sizeof(conn->db->max_rows), 1, conn->file);
    if(rc != 1) die("Failed to write max_rows to database.", conn);

    // 对于每一行，逐个字段写入
    for(int i = 0; i < conn->db->max_rows; i++) {
        struct Address *addr = &conn->db->rows[i];

        // 写入id和set标志
        rc = fwrite(&addr->id, sizeof(addr->id), 1, conn->file) +
             fwrite(&addr->set, sizeof(addr->set), 1, conn->file);
        if(rc != 2) die("Failed to write address metadata.", conn);

        // 写入name和email，注意这里假设name和email已经正确分配了内存
        if(addr->set) { // 仅针对已设置的记录进行写入
            rc = fwrite(addr->name, conn->db->max_data, 1, conn->file) +
                 fwrite(addr->email, conn->db->max_data, 1, conn->file);
            if(rc != 2) die("Failed to write address data.", conn);
        }
    }

    rc = fflush(conn->file);
    if(rc == -1) die("Cannot flush database.", conn);
}

void Database_write(struct Connection *conn){
    rewind(conn->file);

    // 写入max_data和max_rows
    int rc = fwrite(&conn->db->max_data, sizeof(conn->db->max_data), 1, conn->file);
    if(rc != 1) die("Failed to write max_data to database.", conn);
    rc = fwrite(&conn->db->max_rows, sizeof(conn->db->max_rows), 1, conn->file);
    if(rc != 1) die("Failed to write max_rows to database.", conn);

    // 逐个写入Address结构
    for(int i = 0; i < conn->db->max_rows; i++){
        struct Address *addr = &conn->db->rows[i];
        // 写入Address结构的基础数据
        rc = fwrite(addr, sizeof(struct Address) - sizeof(char*) * 2, 1, conn->file);
        if(rc != 1) die("Failed to write address base data.", conn);

        // 分别写入name和email字符串
        if(addr->set){
            rc = fwrite(addr->name, conn->db->max_data, 1, conn->file);
            if(rc != 1) die("Failed to write name.", conn);
            rc = fwrite(addr->email, conn->db->max_data, 1, conn->file);
            if(rc != 1) die("Failed to write email.", conn);
        }
    }
    rc = fflush(conn->file);
    if(rc == -1) die("Cannot flush database.", conn);
}

void Database_load(struct Connection *conn) {
    // 动态分配内存给所有行
    conn->db->rows = malloc(conn->db->max_rows * sizeof(struct Address));
    if (!conn->db->rows) die("Memory error", conn);

    for (int i = 0; i < conn->db->max_rows; i++) {
        // 对每行，首先只为name和email分配内存
        conn->db->rows[i].name = malloc(conn->db->max_data);
        conn->db->rows[i].email = malloc(conn->db->max_data);
        if (!conn->db->rows[i].name || !conn->db->rows[i].email)
            die("Memory error", conn);

        // 读取每个地址结构的id和set值
        if (fread(&conn->db->rows[i].id, sizeof(int), 1, conn->file) != 1)
            die("Failed to load id from database.", conn);
        if (fread(&conn->db->rows[i].set, sizeof(int), 1, conn->file) != 1)
            die("Failed to load set from database.", conn);

        // 读取name和email字段
        if (fread(conn->db->rows[i].name, conn->db->max_data, 1, conn->file) != 1)
            die("Failed to load name from database.", conn);
        if (fread(conn->db->rows[i].email, conn->db->max_data, 1, conn->file) != 1)
            die("Failed to load email from database.", conn);
    }
}
//读取数据库
void Database_load(struct Connection *conn){
    // 动态获取大小信息
    if(fread(&conn->db->max_data, sizeof(conn->db->max_data), 1, conn->file) != 1
    || fread(&conn->db->max_rows, sizeof(conn->db->max_rows), 1, conn->file) != 1)
        die("Failed to load database size information.", conn);

    conn->db->rows = malloc(conn->db->max_rows * sizeof(struct Address));
    if(!conn->db->rows) die("Memory allocation failed for rows.", conn);

    for(int i = 0; i < conn->db->max_rows; i++){
        // 为name和email字段分配内存
        conn->db->rows[i].name = malloc(conn->db->max_data);
        conn->db->rows[i].email = malloc(conn->db->max_data);
        if(!conn->db->rows[i].name || !conn->db->rows[i].email)
            die("Memory allocation failed for name or email.", conn);

        // 读取id和set字段
        if(fread(&conn->db->rows[i].id, sizeof(int), 1, conn->file) != 1
        || fread(&conn->db->rows[i].set, sizeof(int), 1, conn->file) != 1)
            die("Failed to load id/set.", conn);

        // 读取name和email
        if(fread(conn->db->rows[i].name, conn->db->max_data, 1, conn->file) != 1
        || fread(conn->db->rows[i].email, conn->db->max_data, 1, conn->file) != 1)
            die("Failed to load name/email.", conn);

        // 打印name和email以验证
        printf("Row %d name: %s\n", i, conn->db->rows[i].name);
        printf("Row %d email: %s\n", i, conn->db->rows[i].email);
    }
    printf("Database loading completed.\n");
}
